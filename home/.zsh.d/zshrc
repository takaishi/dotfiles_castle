#/bin/sh
source $HOME/.zsh.d/zshrc.antigen

autoload -Uz add-zsh-hook
autoload -Uz colors
colors


############################################################
# ヒストリ
############################################################

# シェル終了時，ヒストリをヒストリファイルに追加する
setopt APPEND_HISTORY

# プロセス間で履歴を共有
setopt SHARE_HISTORY

# ヒストリが重複した場合，古い方を削除
setopt HIST_IGNORE_ALL_DUPS

# 先頭にスペースを入れた時はヒストリに追加しない
setopt HIST_IGNORE_SPACE

# コマンドライン中の余分なスペースを削除してヒストリに登録
setopt HIST_REDUCE_BLANKS

# ヒストリの保存先
HISTFILE=$HOME/.zhistry

# メモリ内に保持するヒストリ数
HISTSIZE=500000

# 保存するヒストリ数
SAVEHIST=500000

# ヒストリにコマンド入力時刻と実行時間も記録する
setopt EXTENDED_HISTORY

function history-all {history -E 1 } #全履歴の一覧を出力

############################################################
# 補完
############################################################

#fpath=($HOME/.tmuxinator/completion ${fpath})
autoload -U compinit
compinit 

# 候補一覧のファイル名末尾にファイル種別を表す記号をつける
setopt LIST_TYPES

# 一覧の行数をなるべく少なくする
setopt LIST_PACKED

# 大文字小文字両方にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z} r:|[-_.]=**'

# プロセスをps -xから取得，補完する
zstyle ':completion:*:processes' command 'ps x'

# sudo時も補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
			     /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

zstyle ':completion:*:git' command 'git --no-pager log -n 10 --pretty=format:"%h - %an %ar : %s"'

############################################################
# プロンプト
############################################################

local GREEN=$'%F{green}'
local BLUE=$'%F{blue}'
local DEFAULT=$'%{\e[1;m%}'
local VCS='%1(v|%F{yellow}%1v%F{green} |)'

PROMPT="%F{green}[%n@%m]
[%h] (%j) %f$DEFAULT%(!.#.$) "
RPROMPT=$GREEN"$VCS [%~]"$DEFAULT
SPROMPT="correct: %R -> %r ? " 

setopt transient_rprompt

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git:*' formats '%c%u%b'
zstyle ':vcs_info:git:*' actionformats '%c%u%b|%a'

#カレントディレクトリ/コマンド記録
#local _cmd=''
#local _lastdir=''
#preexec() {
#  _cmd="$1"
#  _lastdir="$PWD"
#}
#git情報更新
update_vcs_info() {
  psvar=()
  LANG=en_US.UTF-8 vcs_info
  [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}
#カレントディレクトリ変更時/git関連コマンド実行時に情報更新
precmd() {
  _r=$?
  case "${_cmd}" in
    git*|stg*) update_vcs_info ;;
    *) [ "${_lastdir}" != "$PWD" ] && update_vcs_info ;;
  esac
  return $_r
}

# Set Shell Options
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt correct
#setopt auto_remove_slash2
setopt auto_name_dirs
setopt prompt_subst
setopt extended_glob
setopt no_beep
setopt always_last_prompt
setopt cdable_vars
setopt sh_word_split
setopt auto_param_keys
setopt pushd_ignore_dups

# ディレクトリスタック
DIRSTACKSIZE=100
setopt AUTO_PUSHD
zstyle ':completion:*' menu select
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:descriptions' format '%BCompleting%b %U%d%u'

############################################################
# エイリアス
############################################################

# Alias

if [ `hostname` = "anor.local" ]; then
alias ll='ls -lG'
alias ls='ls -G'

else
alias ls='ls -F --color=auto'
alias la='ls -a --color=auto'
alias ll='ls -la --color=auto'
fi

#alias firefox='firefox-bin'

alias tmux-choose-buffer="tmux list-buffers | percol | sed -E 's/^([0-9]*):.*$/\1/g' | xargs -I{} tmux save-buffer -b {} - | reattach-to-user-namespace pbcopy"

alias glgg='git logg'
alias glg='git logg | head'
alias gst='git status -s -b'
alias gd='git diff --color -w'
#alias emacs='emacs -nw'
#alias em='emacsclient --tty'
#alias g='git'
#alias screen='tscreen'
#alias xdvi='pxdvi'
#alias dvips='pdvips'
#alias r=rails

alias gst='git status -s -b'
# Suffix Alias
alias -s pdf=evince
alias -s dvi=pxdvi
alias -s eps=display
alias -s zip=unzip
alias -s tar.gz="tar xvzf"
alias -s tar.bz="tar xvjf"

alias -s lg='| grep'

alias kitchen='nocorrect kitchen'

############################################################
# キーバインド
############################################################
stty -istrip
bindkey -e
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward
bindkey "\M-C-f" forward-word
bindkey "\M-C-b" backward-word
bindkey '\M-w' backward-kill-word


# ウィンドウタイトルを変更する
# コマンド実行中：コマンド名
# それ以外：USER@HOSTNAME
# case "${TERM}" in screen)
# 		preexec() {
# 			echo -ne "\ek#${1%% *}\e\\"
# 		}
# 		precmd() {
# 			echo -ne "\ek${USER}@$(hostname)\e\\"
# 		}
# esac


## Invoke the ``dired'' of current working directory in Emacs buffer.
function dired () {
	emacsclient -e "(dired \"$PWD\")"
}

## Chdir to the ``default-directory'' of currently opened in Emacs buffer.
function cde () {
	EMACS_CWD=`emacsclient -e "
		(expand-file-name
		 (with-current-buffer
		  (nth 1
		   (assoc 'buffer-list
		    (nth 1 (nth 1 (current-frame-configuration)))))
		  default-directory))" | sed 's/^"\(.*\)"$/\1/'`

		echo "chdir to $EMACS_CWD"
		cd "$EMACS_CWD"
}

# 実行したコマンド名をfluentdに投げる
if [ `hostname` = "turris" ]; then
  function preexec_fluent() {
      hn=`hostname | tr -d '\n'`
      curl -X POST -d 'json={"hostname":"'$hn'", "command":"'${1%% *}'"}' localhost:24224/zsh
  }
fi
# preexec_functions=(preexec_fluent)

# tmuxの中でsshを実行した場合，新しくウィンドウを作成する
#if [ $TERM = screen ]; then
#	function ssh_tmux() {
#	 	eval server=\${$#}
 #	 	tmux new-window -n $@ "exec ssh $@"
#	}
#	alias ssh_=ssh
#	alias ssh=ssh_tmux
#fi


# tmuxの中でmanを実行した場合，新しくペインを作成する
if [ $TERM = screen ]; then
	function man_tmux() {
	 	eval server=\${$#}
 	 	tmux split-window "exec man $@"
	}
	#alias man_=man
	#alias man=man_tmux
fi


if [ `hostname` = "turris" ]; then
    # preexec() {
    #     ruby ${HOME}/bin/cmd_logger.rb "$1" &!
    # }
    . /home/takaishi_r/local/bin/z.sh
fi

#[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

# 
source ~/.zsh.d/packages/zaw/zaw.zsh
zsh-history() {
  zaw zaw-src-history
}
zle -N zsh-history
bindkey '^Xh' zsh-history

REPORTTIME=10


perl -wle \
    'do { print qq/(setenv "$_" "$ENV{$_}")/ if exists $ENV{$_} } for @ARGV' \
    PATH > ~/.emacs.d/shellenv.el


function chpwd() { ls -F }

#bindkey -s P 'ps auxw'
#bindkey -s G '| grep '
#
#
#
#
#
#


# Source promptway.zsh
# zstyle による設定前に読み込むこと
#source path/to/promptway/promptway.zsh

zstyle ':prompt:dir' formats "%B%a%b"
zstyle ':prompt:dir:symlink' formats "%B%F{cyan}%a@%f%b"
zstyle ':prompt:way' formats "%a"
zstyle ':prompt:backward' enable t
zstyle ':prompt:backward:dir' formats "%U%a%u"
zstyle ':prompt:backward:dir:symlink' formats "%U%F{cyan}%a@%f%u"
zstyle ':prompt:backward:way' formats "%a"

## パス省略表示
# パス省略を有効 (default: 無効)
zstyle ':prompt:truncate' enable t

# 省略記号 (default: ...)
#zstyle ':prompt:truncate' symbol '… '

# パス最大長 (default: 30)
#zstyle ':prompt:truncate' max_length 40

# カレントディレクトリの親ディレクトリを表示する (default: 無効)
zstyle ":prompt:truncate" show_working_parent t

# 前ディレクトリの親ディレクトリを表示する (default: 無効)
#zstyle ":prompt:truncate" show_backward_parent t

# "/" 直下のディレクトリを表示する (default: 無効)
zstyle ":prompt:truncate" show_slash_second_root t

# "~/" 直下のディレクトリを表示する (default: 無効)
zstyle ":prompt:truncate" show_home_second_root t

## カレントディレクトリの Permission 表示
# Permission のフォーマット
zstyle ':prompt:permission:dir' formats '(%F{yellow}%a%b%f)'
# オーナーが異なる場合に表示されるシンボル
zstyle ':prompt:permission:dir' non_owner_symbol '⭤'

## 前ディレクトリの Permission 表示
# Permission のフォーマット
zstyle ':prompt:permission:backward' formats '(%F{blue}%a%b%f)'
# オーナーが異なる場合に表示されるシンボル
zstyle ':prompt:permission:backward' non_owner_symbol '⭤'


if [ $TERM = "screen" ]; then
  tmux rename-window `hostname`
fi


# peco

function peco-pkill() {
  for pid in `ps aux | peco | awk '{ print $2 }'`
  do
    kill $pid
    echo "killed ${pid}"
  done
}
alias pk="peco-pkill"


b2h()
{
# By: Simon Sweetwater
# Spotted Script @: http://www.linuxjournal.com/article/9293?page=0,1 
    # Convert input parameter (number of bytes) 
    # to Human Readable form
    #
    SLIST="bytes,KB,MB,GB,TB,PB,EB,ZB,YB"

    POWER=1
    VAL=$( echo "scale=2; $1 / 1" | bc)
    VINT=$( echo $VAL / 1024 | bc )
    while [ ! $VINT = "0" ]
    do
        let POWER=POWER+1
        VAL=$( echo "scale=2; $VAL / 1024" | bc)
        VINT=$( echo $VAL / 1024 | bc )
    done

    echo $VAL$( echo $SLIST | cut -f$POWER -d, )
}

k2h()
{
    # Convert input parameter (number of kilobytes) 
# Spotted Script @: http://www.linuxjournal.com/article/9293?page=0,1 
    # to Human Readable form
    # MODIFIED BY kossboss
    SLIST="bytes,KB,MB,GB,TB,PB,EB,ZB,YB"
    POWER=1
    VAL=$( echo "scale=2; $1 * 1024 / 1" | bc)
    VINT=$( echo $VAL / 1024 | bc )
    while [ ! $VINT = "0" ]
    do
        let POWER=POWER+1
        VAL=$( echo "scale=2; $VAL / 1024" | bc)
        VINT=$( echo $VAL / 1024 | bc )
    done
    echo $VAL$( echo $SLIST | cut -f$POWER -d, )
}


# zshにpeco + ghqを導入したメモ - Qiita - http://qiita.com/ysk_1031/items/8cde9ce8b4d0870a129d
#
# $ brew tap peco/peco
# $ brew install peco
#
# $ brew tap motemen/ghq
# $ brew install ghq
#

if [ `which peco` ]; then
    setopt hist_ignore_all_dups
    function peco_select_history() {
        local tac
        if which tac > /dev/null; then
            tac="tac"
        else
            tac="tail -r"
        fi
        BUFFER=$(fc -l -n 1 | eval $tac | peco --query "$LBUFFER")
        CURSOR=$#BUFFER
        zle clear-screen
    }
    zle -N peco_select_history
    bindkey '^r' peco_select_history
else
    echo "peco is not found."
fi

source "$HOME/.homesick/repos/homeshick/homeshick.sh"
source "$HOME/.homesick/repos/homeshick/completions/homeshick-completion.bash"