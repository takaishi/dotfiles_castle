#/bin/zsh
if [ ! -e ~/.zplug/zplug ]; then
  curl -fLo ~/.zplug/zplug --create-dirs git.io/zplug
fi

source ~/.zplug/zplug
zplug "zsh-users/zsh-syntax-highlighting"
zplug "b4b4r07/enhancd"
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-syntax-highlighting"

autoload -Uz add-zsh-hook
autoload -Uz colors
colors

############################################################
# ヒストリ
############################################################

# シェル終了時，ヒストリをヒストリファイルに追加する
setopt APPEND_HISTORY

# プロセス間で履歴を共有
setopt SHARE_HISTORY

# ヒストリが重複した場合，古い方を削除
setopt HIST_IGNORE_ALL_DUPS

# 先頭にスペースを入れた時はヒストリに追加しない
setopt HIST_IGNORE_SPACE

# コマンドライン中の余分なスペースを削除してヒストリに登録
setopt HIST_REDUCE_BLANKS

# ヒストリの保存先
HISTFILE=$HOME/.zhistry

# メモリ内に保持するヒストリ数
HISTSIZE=500000

# 保存するヒストリ数
SAVEHIST=500000

# ヒストリにコマンド入力時刻と実行時間も記録する
setopt EXTENDED_HISTORY

function history-all {history -E 1 } #全履歴の一覧を出力

############################################################
# 補完
############################################################

#fpath=($HOME/.tmuxinator/completion ${fpath})
autoload -U compinit
compinit 

# 候補一覧のファイル名末尾にファイル種別を表す記号をつける
setopt LIST_TYPES

# 一覧の行数をなるべく少なくする
setopt LIST_PACKED

# 大文字小文字両方にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z} r:|[-_.]=**'

# プロセスをps -xから取得，補完する
zstyle ':completion:*:processes' command 'ps x'

# sudo時も補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
			     /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

zstyle ':completion:*:git' command 'git --no-pager log -n 10 --pretty=format:"%h - %an %ar : %s"'

############################################################
# プロンプト
############################################################

local GREEN=$'%F{green}'
local RED=$'%F{red}'
local BLUE=$'%F{blue}'
local DEFAULT=$'%{\e[1;m%}'
local VCS='%1(v|%F{yellow}%1v%F{green} |)'

PROMPT=$RED"%(!.#.$) "$DEFAULT
RPROMPT=$GREEN"$VCS [%~]"$DEFAULT
SPROMPT="correct: %R -> %r ? " 

setopt transient_rprompt

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git:*' formats '%c%u%b'
zstyle ':vcs_info:git:*' actionformats '%c%u%b|%a'

#カレントディレクトリ/コマンド記録
#local _cmd=''
#local _lastdir=''
#preexec() {
#  _cmd="$1"
#  _lastdir="$PWD"
#}
#git情報更新
update_vcs_info() {
  psvar=()
  LANG=en_US.UTF-8 vcs_info
  [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}


autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:*' formats '%r'

#カレントディレクトリ変更時/git関連コマンド実行時に情報更新
precmd() {

LANG=en_US.UTF-8 vcs_info
  [[ -n ${vcs_info_msg_0_} ]] && tmux rename-window $vcs_info_msg_0_

  _r=$?
  case "${_cmd}" in
    git*|stg*) update_vcs_info ;;
    *) [ "${_lastdir}" != "$PWD" ] && update_vcs_info ;;
  esac
  return $_r
}

# Set Shell Options
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt correct
#setopt auto_remove_slash2
setopt auto_name_dirs
setopt prompt_subst
setopt extended_glob
setopt no_beep
setopt always_last_prompt
setopt cdable_vars
setopt sh_word_split
setopt auto_param_keys
setopt pushd_ignore_dups
setopt completealiases

# ディレクトリスタック
DIRSTACKSIZE=100
setopt AUTO_PUSHD
zstyle ':completion:*' menu select
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:descriptions' format '%BCompleting%b %U%d%u'

############################################################
# エイリアス
############################################################

# Alias

alias glgg='git logg'
alias glg='git logg | head'
alias gst='git status -s -b'
alias gd='git diff --color -w'
alias gst='git status -s -b'

# Suffix Alias
alias -s tar.gz="tar xvzf"
alias -s tar.bz="tar xvjf"
alias -s lg='| grep'

############################################################
# キーバインド
############################################################
stty -istrip
bindkey -e
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward
bindkey "\M-C-f" forward-word
bindkey "\M-C-b" backward-word
bindkey '\M-w' backward-kill-word


REPORTTIME=10

if [ -e $HOME/.emacs.d/shellenv.el ]; then
  perl -wle \
    'do { print qq/(setenv "$_" "$ENV{$_}")/ if exists $ENV{$_} } for @ARGV' \
    PATH > ~/.emacs.d/shellenv.el
fi

function chpwd() { ls -F }

#bindkey -s P 'ps auxw'
#bindkey -s G '| grep '

zstyle ':prompt:dir' formats "%B%a%b"
zstyle ':prompt:dir:symlink' formats "%B%F{cyan}%a@%f%b"
zstyle ':prompt:way' formats "%a"
zstyle ':prompt:backward' enable t
zstyle ':prompt:backward:dir' formats "%U%a%u"
zstyle ':prompt:backward:dir:symlink' formats "%U%F{cyan}%a@%f%u"
zstyle ':prompt:backward:way' formats "%a"

## パス省略表示
# パス省略を有効 (default: 無効)
zstyle ':prompt:truncate' enable t

# 省略記号 (default: ...)
#zstyle ':prompt:truncate' symbol '… '

# パス最大長 (default: 30)
#zstyle ':prompt:truncate' max_length 40

# カレントディレクトリの親ディレクトリを表示する (default: 無効)
zstyle ":prompt:truncate" show_working_parent t

# 前ディレクトリの親ディレクトリを表示する (default: 無効)
#zstyle ":prompt:truncate" show_backward_parent t

# "/" 直下のディレクトリを表示する (default: 無効)
zstyle ":prompt:truncate" show_slash_second_root t

# "~/" 直下のディレクトリを表示する (default: 無効)
zstyle ":prompt:truncate" show_home_second_root t

## カレントディレクトリの Permission 表示
# Permission のフォーマット
zstyle ':prompt:permission:dir' formats '(%F{yellow}%a%b%f)'
# オーナーが異なる場合に表示されるシンボル
zstyle ':prompt:permission:dir' non_owner_symbol '⭤'

## 前ディレクトリの Permission 表示
# Permission のフォーマット
zstyle ':prompt:permission:backward' formats '(%F{blue}%a%b%f)'
# オーナーが異なる場合に表示されるシンボル
zstyle ':prompt:permission:backward' non_owner_symbol '⭤'


#if [ $TERM = "screen" ]; then
#  tmux rename-window `hostname`
#fi


# peco

function peco-pkill() {
  for pid in `ps aux | peco | awk '{ print $2 }'`
  do
    kill $pid
    echo "killed ${pid}"
  done
}
alias pk="peco-pkill"

# zshにpeco + ghqを導入したメモ - Qiita - http://qiita.com/ysk_1031/items/8cde9ce8b4d0870a129d
#
# $ brew tap peco/peco
# $ brew install peco
#
# $ brew tap motemen/ghq
# $ brew install ghq
#
if type peco > /dev/null 2>&1; then
    setopt hist_ignore_all_dups
    function peco_select_history() {
        local tac
        if which tac > /dev/null; then
            tac="tac"
        else
            tac="tail -r"
        fi
        BUFFER=$(fc -l -n 1 | eval $tac | peco --query "$LBUFFER")
        CURSOR=$#BUFFER
        zle clear-screen
    }
    zle -N peco_select_history
    bindkey '^r' peco_select_history
else
    echo "peco is not found."
fi


alias g='git'
alias -g B='`git branch -a | peco --prompt "GIT BRANCH>" | head -n 1 | sed -e "s/^\*\s*//g"`'
alias -g R='`git remote | peco --prompt "GIT REMOTE>" | head -n 1`'
alias -g H='`curl -sL https://api.github.com/users/YOUR_USERNAME/repos | jq -r ".[].full_name" | peco --prompt "GITHUB REPOS>" | head -n 1`'
alias -g LR='`git branch -a | peco --query "remotes/ " --prompt "GIT REMOTE BRANCH>" | head -n 1 | sed "s/remotes\/[^\/]*\/\(\S*\)/\1 \0/"`'
alias s='ssh $(grep -iE "^host[[:space:]]+[^*]" ~/.ssh/config|peco|awk "{print \$2}")'


# agで検索 => pecoで絞り込み => 該当行をvimで開く
function agvim() {
    vim $(ag $@ | peco --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
}

export PYENV_ROOT="${HOME}/.pyenv"
if [ -d "${PYENV_ROOT}" ]; then
  export PATH=${PYENV_ROOT}/bin:$PATH
  eval "$(pyenv init -)"
fi


hosts=( ${(@)${${(M)${(s:# :)${(zj:# :)${(Lf)"$([[ -f ~/.ssh/config ]] && < ~/.ssh/config)"}%%\#*}}##host(|name) *}#host(|name) }/\*} )
zstyle ':completion:*:hosts' hosts $hosts

function s() {
  ssh $(awk '
    tolower($1)=="host" {
      for (i=2; i<=NF; i++) {
        if ($i !~ "[*?]") {
          print $i
        }
      }
    }
  ' ~/.ssh/config | sort | peco)
}
# alias s='ssh $(grep -E '^Host[[:space:]]+[^*]' ~/.ssh/config|peco|awk "{print \$2}")'
export PATH="$HOME/.rbenv/bin:$PATH"

export SYS_NOTIFIER="/usr/local/bin/terminal-notifier"
export NOTIFY_COMMAND_COMPLETE_TIMEOUT=10
