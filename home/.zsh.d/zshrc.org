#+BEGIN_SRC shell-script
#!/bin/zsh
autoload -Uz add-zsh-hook
autoload -Uz colors
colors
#+END_SRC

* ヒストリ

#+BEGIN_SRC shell-script
  
  # シェル終了時，ヒストリをヒストリファイルに追加する
  setopt APPEND_HISTORY
  
  # プロセス間で履歴を共有
  setopt SHARE_HISTORY
  
  # ヒストリが重複した場合，古い方を削除
  setopt HIST_IGNORE_ALL_DUPS
  
  # 先頭にスペースを入れた時はヒストリに追加しない
  setopt HIST_IGNORE_SPACE
  
  # コマンドライン中の余分なスペースを削除してヒストリに登録
  setopt HIST_REDUCE_BLANKS
  
  # ヒストリの保存先
  HISTFILE=$HOME/.zhistry
  
  # メモリ内に保持するヒストリ数
  HISTSIZE=500000
  
  # 保存するヒストリ数
  SAVEHIST=500000
  
  # ヒストリにコマンド入力時刻と実行時間も記録する
  setopt EXTENDED_HISTORY
  
  function history-all {history -E 1 } #全履歴の一覧を出力
#+END_SRC

* 補完

#+BEGIN_SRC shell-script
  
  #fpath=($HOME/.tmuxinator/completion ${fpath})
  autoload -U compinit
  compinit 
  
  # 候補一覧のファイル名末尾にファイル種別を表す記号をつける
  setopt LIST_TYPES
  
  # 一覧の行数をなるべく少なくする
  setopt LIST_PACKED
  
  # 大文字小文字両方にマッチさせる
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z} r:|[-_.]=**'
  
  # プロセスをps -xから取得，補完する
  zstyle ':completion:*:processes' command 'ps x'
  
  # sudo時も補完する
  zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
             /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
  
  zstyle ':completion:*:git' command 'git --no-pager log -n 10 --pretty=format:"%h - %an %ar : %s"'
#+END_SRC

* プロンプト

#+BEGIN_SRC shell-script
  local GREEN=$'%F{green}'
  local BLUE=$'%F{blue}'
  local DEFAULT=$'%{\e[1;m%}'
  local VCS='%1(v|%F{yellow}%1v%F{green} |)'
  
  PROMPT="%F{green}[%n@%m]
  [%h] (%j) %f$DEFAULT%(!.#.$) "
  RPROMPT=$GREEN"$VCS [%~]"$DEFAULT
  SPROMPT="correct: %R -> %r ? " 
  
  setopt transient_rprompt
  
  autoload -Uz vcs_info
  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:git:*' formats '%c%u%b'
  zstyle ':vcs_info:git:*' actionformats '%c%u%b|%a'
  
  #カレントディレクトリ/コマンド記録
  #local _cmd=''
  #local _lastdir=''
  #preexec() {
  #  _cmd="$1"
  #  _lastdir="$PWD"
  #}
  #git情報更新
  update_vcs_info() {
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
  }
  #カレントディレクトリ変更時/git関連コマンド実行時に情報更新
  precmd() {
    _r=$?
    case "${_cmd}" in
      git*|stg*) update_vcs_info ;;
      ,*) [ "${_lastdir}" != "$PWD" ] && update_vcs_info ;;
    esac
    return $_r
  }
  
  # Set Shell Options
  setopt auto_cd
  setopt auto_pushd
  setopt pushd_ignore_dups
  setopt correct
  #setopt auto_remove_slash2
  setopt auto_name_dirs
  setopt prompt_subst
  setopt extended_glob
  setopt no_beep
  setopt always_last_prompt
  setopt cdable_vars
  setopt sh_word_split
  setopt auto_param_keys
  setopt pushd_ignore_dups
  
  # ディレクトリスタック
  DIRSTACKSIZE=100
  setopt AUTO_PUSHD
  zstyle ':completion:*' menu select
  zstyle ':completion:*:cd:*' ignore-parents parent pwd
  zstyle ':completion:*:descriptions' format '%BCompleting%b %U%d%u'
#+END_SRC

* エイリアス

#+BEGIN_SRC shell-script
  
  # Alias
  
  if [ `hostname` = "takaishi-no-MacBook-Air.local" ]; then
  alias ll='ls -lG'
  alias ls='ls -G'
  echo "equal"
  
  else
  echo "not equal"
  alias ls='ls -F --color=auto'
  alias la='ls -a --color=auto'
  alias ll='ls -la --color=auto'
  fi
  
  #alias firefox='firefox-bin'
  
  alias glgg='git logg'
  alias glg='git logg | head'
  alias gst='git status -s -b'
  alias gd='git diff --color'
  #alias emacs='emacs -nw'
  #alias em='emacsclient --tty'
  #alias g='git'
  #alias screen='tscreen'
  #alias xdvi='pxdvi'
  #alias dvips='pdvips'
  #alias r=rails
  
  alias gst='git status -s -b'
  # Suffix Alias
  alias -s pdf=evince
  alias -s dvi=pxdvi
  alias -s eps=display
  alias -s zip=unzip
  alias -s tar.gz="tar xvzf"
  alias -s tar.bz="tar xvjf"
  
  alias -s lg='| grep'
  
  ############################################################
#+END_SRC

* キーバインド

#+BEGIN_SRC shell-script
  
  ############################################################
  stty -istrip
  bindkey -e
  bindkey '^R' history-incremental-pattern-search-backward
  bindkey '^S' history-incremental-pattern-search-forward
  bindkey "\M-C-f" forward-word
  bindkey "\M-C-b" backward-word
  
  
  # ウィンドウタイトルを変更する
  # コマンド実行中：コマンド名
  # それ以外：USER@HOSTNAME
  # case "${TERM}" in screen)
  #     preexec() {
  #       echo -ne "\ek#${1%% *}\e\\"
  #     }
  #     precmd() {
  #       echo -ne "\ek${USER}@$(hostname)\e\\"
  #     }
  # esac
  
  
  ## Invoke the ``dired'' of current working directory in Emacs buffer.
  function dired () {
    emacsclient -e "(dired \"$PWD\")"
  }
  
  ## Chdir to the ``default-directory'' of currently opened in Emacs buffer.
  function cde () {
    EMACS_CWD=`emacsclient -e "
      (expand-file-name
       (with-current-buffer
        (nth 1
         (assoc 'buffer-list
          (nth 1 (nth 1 (current-frame-configuration)))))
        default-directory))" | sed 's/^"\(.*\)"$/\1/'`
  
      echo "chdir to $EMACS_CWD"
      cd "$EMACS_CWD"
  }
  
  # 実行したコマンド名をfluentdに投げる
  if [ `hostname` = "turris" ]; then
    function preexec_fluent() {
        hn=`hostname | tr -d '\n'`
        curl -X POST -d 'json={"hostname":"'$hn'", "command":"'${1%% *}'"}' localhost:8888/zsh
    }
  fi
  preexec_functions=(preexec_fluent)
  
  # tmuxの中でsshを実行した場合，新しくウィンドウを作成する
  #if [ $TERM = screen ]; then
  # function ssh_tmux() {
  #   eval server=\${$#}
   #    tmux new-window -n $@ "exec ssh $@"
  # }
  # alias ssh_=ssh
  # alias ssh=ssh_tmux
  #fi
  
  
  # tmuxの中でmanを実行した場合，新しくペインを作成する
  if [ $TERM = screen ]; then
    function man_tmux() {
      eval server=\${$#}
      tmux split-window "exec man $@"
    }
    #alias man_=man
    #alias man=man_tmux
  fi
  
  
  if [ `hostname` = "turris" ]; then
      # preexec() {
      #     ruby ${HOME}/bin/cmd_logger.rb "$1" &!
      # }
      . /home/takaishi_r/local/bin/z.sh
  fi
  
  #[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator
  
  # 
  source ~/.zsh.d/zaw/zaw.zsh
  zsh-history() {
    zaw zaw-src-history
  }
  zle -N zsh-history
  bindkey '^Xh' zsh-history
  
  REPORTTIME=10
  
  
  perl -wle \
      'do { print qq/(setenv "$_" "$ENV{$_}")/ if exists $ENV{$_} } for @ARGV' \
      PATH > ~/.emacs.d/shellenv.el
  
  
  function chpwd() { ls -F }
  
  #bindkey -s P 'ps auxw'
  #bindkey -s G '| grep '
#+END_SRC
